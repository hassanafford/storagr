-- ============================================
-- ŸÜÿ∏ÿßŸÖ ÿ•ÿØÿßÿ±ÿ© ŸÖÿÆÿßÿ≤ŸÜ ÿßŸÑŸÖÿØÿ±ÿ≥ÿ© - ÿßŸÑÿ•ÿπÿØÿßÿØ ÿßŸÑŸÉÿßŸÖŸÑ ŸàÿßŸÑÿ¢ŸÖŸÜ
-- School Warehouse Management System - Complete & Secure Setup
-- ============================================
-- 
-- ‚úÖ Ÿáÿ∞ÿß ÿßŸÑŸÖŸÑŸÅ Ÿäÿ≠ÿ™ŸàŸä ÿπŸÑŸâ:
-- 1. ÿ™ŸÜÿ∏ŸäŸÅ ŸÉÿßŸÖŸÑ ŸÑŸÑÿ¨ÿØÿßŸàŸÑ ÿßŸÑŸÇÿØŸäŸÖÿ©
-- 2. ÿ•ŸÜÿ¥ÿßÿ° ÿ¨ŸÖŸäÿπ ÿßŸÑÿ¨ÿØÿßŸàŸÑ ŸàÿßŸÑÿπŸÑÿßŸÇÿßÿ™
-- 3. ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ© (12 ŸÖÿÆÿ≤ŸÜ + 13 ŸÖÿ≥ÿ™ÿÆÿØŸÖ)
-- 4. ÿ•ÿπÿØÿßÿØ Triggers Ÿà Functions
-- 5. ÿ™ŸÅÿπŸäŸÑ Row Level Security
-- 6. ŸÜÿ∏ÿßŸÖ ŸÖÿµÿßÿØŸÇÿ© ÿ¢ŸÖŸÜ ÿ®ÿ™ÿ¥ŸÅŸäÿ± SHA-256
-- 7. ÿ™ÿ≥ÿ¨ŸäŸÑ ÿ™ŸÑŸÇÿßÿ¶Ÿä ŸÑŸÑŸÖÿπÿßŸÖŸÑÿßÿ™ ÿπŸÜÿØ ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑŸÉŸÖŸäÿßÿ™
--
-- üîê ŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖÿµÿßÿØŸÇÿ©:
-- - ÿπŸÖŸàÿØ password_hash ŸÖŸàÿ¨ŸàÿØ ŸÅŸä ÿ¨ÿØŸàŸÑ users (ÿßŸÑÿ≥ÿ∑ÿ± 77)
-- - ÿØÿßŸÑÿ© hash_password() ŸÑÿ™ÿ¥ŸÅŸäÿ± ŸÉŸÑŸÖÿßÿ™ ÿßŸÑŸÖÿ±Ÿàÿ± (SHA-256)
-- - ÿØÿßŸÑÿ© verify_password() ŸÑŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ŸÉŸÑŸÖÿßÿ™ ÿßŸÑŸÖÿ±Ÿàÿ±
-- - ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ŸÖŸèÿÆÿ≤ŸÜŸäŸÜ ÿ®ŸÉŸÑŸÖÿßÿ™ ŸÖÿ±Ÿàÿ± ŸÖÿ¥ŸÅÿ±ÿ©
--
-- ‚ö†Ô∏è ÿ™ÿ≠ÿ∞Ÿäÿ±: Ÿáÿ∞ÿß ÿ≥Ÿäÿ≠ÿ∞ŸÅ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖŸàÿ¨ŸàÿØÿ©!
-- ============================================

-- ============================================
-- ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© 1: ÿßŸÑÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑŸÉÿßŸÖŸÑ
-- ============================================

-- ÿ≠ÿ∞ŸÅ ÿßŸÑŸÄ Views ÿßŸÑŸÇÿØŸäŸÖÿ©
DROP VIEW IF EXISTS items_full_view CASCADE;
DROP VIEW IF EXISTS transactions_full_view CASCADE;
DROP VIEW IF EXISTS low_stock_items_view CASCADE;

-- ÿ≠ÿ∞ŸÅ ÿßŸÑŸÄ Triggers ÿßŸÑŸÇÿØŸäŸÖÿ© (ÿ™ŸÖ ÿßŸÑÿ™ÿ¨ÿßŸàÿ≤ ŸÑÿ£ŸÜ DROP TABLE ÿ≥Ÿäÿ≤ŸäŸÑŸáÿß ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸãÿå ŸÖŸÖÿß ŸäŸÖŸÜÿπ ÿ£ÿÆÿ∑ÿßÿ° ÿßŸÑÿ¨ÿØÿßŸàŸÑ ÿ∫Ÿäÿ± ÿßŸÑŸÖŸàÿ¨ŸàÿØÿ©)

-- ÿ≠ÿ∞ŸÅ ÿßŸÑŸÄ Functions ÿßŸÑŸÇÿØŸäŸÖÿ©
DROP FUNCTION IF EXISTS get_egyptian_time() CASCADE;
DROP FUNCTION IF EXISTS update_updated_at_column() CASCADE;
DROP FUNCTION IF EXISTS check_low_stock() CASCADE;
DROP FUNCTION IF EXISTS log_quantity_change() CASCADE;
DROP FUNCTION IF EXISTS get_warehouse_stats(BIGINT) CASCADE;

-- ÿ≠ÿ∞ŸÅ ÿßŸÑÿ¨ÿØÿßŸàŸÑ ÿ®ÿßŸÑÿ™ÿ±ÿ™Ÿäÿ® ÿßŸÑÿµÿ≠Ÿäÿ≠ (ŸÖŸÜ ÿßŸÑÿ£ÿµÿ∫ÿ± ŸÑŸÑÿ£ŸÉÿ®ÿ±)
DROP TABLE IF EXISTS notifications CASCADE;
DROP TABLE IF EXISTS audit_details CASCADE;
DROP TABLE IF EXISTS inventory_audits CASCADE;
DROP TABLE IF EXISTS transactions CASCADE;
DROP TABLE IF EXISTS daily_audits CASCADE;
DROP TABLE IF EXISTS items CASCADE;
DROP TABLE IF EXISTS audit_logs CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS categories CASCADE;
DROP TABLE IF EXISTS warehouses CASCADE;

-- ============================================
-- ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© 2: ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ¨ÿØÿßŸàŸÑ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©
-- ============================================

-- ÿ¨ÿØŸàŸÑ ÿßŸÑŸÖÿ≥ÿ™ŸàÿØÿπÿßÿ™ (12 ŸÖÿÆÿ≤ŸÜ)
CREATE TABLE warehouses (
  id BIGSERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  location VARCHAR(255),
  description TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- ÿ¨ÿØŸàŸÑ ÿßŸÑŸÅÿ¶ÿßÿ™
CREATE TABLE categories (
  id BIGSERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL UNIQUE,
  description TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- ÿ¨ÿØŸàŸÑ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ (13 ŸÖÿ≥ÿ™ÿÆÿØŸÖ: 1 admin + 12 employee)
CREATE TABLE users (
  id BIGSERIAL PRIMARY KEY,
  national_id VARCHAR(14) NOT NULL UNIQUE,
  name VARCHAR(255) NOT NULL,
  password_hash VARCHAR(255) NOT NULL, -- ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿßŸÑŸÖÿ¥ŸÅÿ±ÿ©
  role VARCHAR(50) NOT NULL CHECK (role IN ('admin', 'employee')),
  warehouse_id BIGINT REFERENCES warehouses(id) ON DELETE SET NULL,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- ÿ¨ÿØŸàŸÑ ÿßŸÑÿπŸÜÿßÿµÿ±
CREATE TABLE items (
  id BIGSERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  quantity INTEGER NOT NULL DEFAULT 0 CHECK (quantity >= 0),
  unit VARCHAR(50) DEFAULT 'ŸÇÿ∑ÿπÿ©',
  category_id BIGINT REFERENCES categories(id) ON DELETE SET NULL,
  warehouse_id BIGINT REFERENCES warehouses(id) ON DELETE CASCADE,
  min_quantity INTEGER DEFAULT 10,
  max_quantity INTEGER,
  barcode VARCHAR(100),
  image_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT unique_item_per_warehouse UNIQUE (name, warehouse_id)
);

-- ÿ¨ÿØŸàŸÑ ÿßŸÑŸÖÿπÿßŸÖŸÑÿßÿ™
CREATE TABLE transactions (
  id BIGSERIAL PRIMARY KEY,
  item_id BIGINT REFERENCES items(id) ON DELETE CASCADE,
  user_id BIGINT REFERENCES users(id) ON DELETE SET NULL,
  transaction_type VARCHAR(50) NOT NULL CHECK (transaction_type IN ('in', 'out', 'audit', 'adjustment', 'transfer')),
  quantity INTEGER NOT NULL,
  quantity_before INTEGER,
  quantity_after INTEGER,
  recipient VARCHAR(255),
  notes TEXT,
  expected_quantity INTEGER,
  actual_quantity INTEGER,
  discrepancy INTEGER,
  egyptian_timestamp VARCHAR(50),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- ÿ¨ÿØŸàŸÑ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™
CREATE TABLE notifications (
  id BIGSERIAL PRIMARY KEY,
  user_id BIGINT REFERENCES users(id) ON DELETE CASCADE,
  type VARCHAR(50) NOT NULL CHECK (type IN ('info', 'success', 'warning', 'error')),
  message TEXT NOT NULL,
  details JSONB,
  read BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- ÿ¨ÿØŸàŸÑ ÿ≥ÿ¨ŸÑ ÿßŸÑÿ™ÿØŸÇŸäŸÇ (Audit Log)
CREATE TABLE audit_logs (
  id BIGSERIAL PRIMARY KEY,
  user_id BIGINT REFERENCES users(id) ON DELETE SET NULL,
  action VARCHAR(100) NOT NULL,
  table_name VARCHAR(100),
  record_id BIGINT,
  old_data JSONB,
  new_data JSONB,
  ip_address VARCHAR(45),
  user_agent TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- ÿ¨ÿØŸàŸÑ ÿπŸÖŸÑŸäÿßÿ™ ÿßŸÑÿ¨ÿ±ÿØ (Inventory Audits)
CREATE TABLE inventory_audits (
  id BIGSERIAL PRIMARY KEY,
  warehouse_id BIGINT REFERENCES warehouses(id) ON DELETE CASCADE,
  user_id BIGINT REFERENCES users(id) ON DELETE SET NULL,
  audit_type VARCHAR(50) NOT NULL CHECK (audit_type IN ('full', 'partial', 'spot')),
  status VARCHAR(50) NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'in_progress', 'completed', 'cancelled')),
  notes TEXT,
  started_at TIMESTAMP WITH TIME ZONE,
  completed_at TIMESTAMP WITH TIME ZONE,
  egyptian_timestamp VARCHAR(50),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- ÿ¨ÿØŸàŸÑ ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿ¨ÿ±ÿØ (Audit Details)
CREATE TABLE audit_details (
  id BIGSERIAL PRIMARY KEY,
  inventory_audit_id BIGINT REFERENCES inventory_audits(id) ON DELETE CASCADE,
  item_id BIGINT REFERENCES items(id) ON DELETE CASCADE,
  expected_quantity INTEGER NOT NULL,
  actual_quantity INTEGER NOT NULL,
  discrepancy INTEGER,
  status VARCHAR(50) NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'verified', 'disputed')),
  notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- ÿ¨ÿØŸàŸÑ ÿßŸÑŸÖÿ±ÿßÿ¨ÿπÿßÿ™ ÿßŸÑŸäŸàŸÖŸäÿ© (Daily Audits)
CREATE TABLE daily_audits (
  id BIGSERIAL PRIMARY KEY,
  warehouse_id BIGINT REFERENCES warehouses(id) ON DELETE CASCADE,
  item_id BIGINT REFERENCES items(id) ON DELETE CASCADE,
  user_id BIGINT REFERENCES users(id) ON DELETE SET NULL,
  expected_quantity INTEGER NOT NULL,
  actual_quantity INTEGER NOT NULL,
  discrepancy INTEGER,
  notes TEXT,
  audit_date DATE NOT NULL,
  egyptian_timestamp VARCHAR(50),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- ============================================
-- ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© 3: ÿ•ŸÜÿ¥ÿßÿ° Indexes ŸÑŸÑÿ£ÿØÿßÿ°
-- ============================================

CREATE INDEX idx_items_warehouse ON items(warehouse_id);
CREATE INDEX idx_items_category ON items(category_id);
CREATE INDEX idx_items_quantity ON items(quantity);
CREATE INDEX idx_items_barcode ON items(barcode);

CREATE INDEX idx_transactions_item ON transactions(item_id);
CREATE INDEX idx_transactions_user ON transactions(user_id);
CREATE INDEX idx_transactions_type ON transactions(transaction_type);
CREATE INDEX idx_transactions_created ON transactions(created_at DESC);

CREATE INDEX idx_users_national_id ON users(national_id);
CREATE INDEX idx_users_warehouse ON users(warehouse_id);
CREATE INDEX idx_users_role ON users(role);

CREATE INDEX idx_notifications_user ON notifications(user_id);
CREATE INDEX idx_notifications_read ON notifications(read);
CREATE INDEX idx_notifications_created ON notifications(created_at DESC);

CREATE INDEX idx_audit_logs_user ON audit_logs(user_id);
CREATE INDEX idx_audit_logs_table ON audit_logs(table_name, record_id);

CREATE INDEX idx_inventory_audits_warehouse ON inventory_audits(warehouse_id);
CREATE INDEX idx_inventory_audits_user ON inventory_audits(user_id);
CREATE INDEX idx_inventory_audits_status ON inventory_audits(status);
CREATE INDEX idx_inventory_audits_created ON inventory_audits(created_at DESC);

CREATE INDEX idx_audit_details_inventory_audit ON audit_details(inventory_audit_id);
CREATE INDEX idx_audit_details_item ON audit_details(item_id);
CREATE INDEX idx_audit_details_status ON audit_details(status);
CREATE INDEX idx_audit_details_created ON audit_details(created_at DESC);

CREATE INDEX idx_daily_audits_warehouse ON daily_audits(warehouse_id);
CREATE INDEX idx_daily_audits_item ON daily_audits(item_id);
CREATE INDEX idx_daily_audits_user ON daily_audits(user_id);
CREATE INDEX idx_daily_audits_date ON daily_audits(audit_date);
CREATE INDEX idx_daily_audits_created ON daily_audits(created_at DESC);

-- ============================================
-- ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© 4: Database Functions
-- ============================================

-- ÿØÿßŸÑÿ© ŸÑÿ™ÿ¥ŸÅŸäÿ± ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± (SHA-256)
CREATE OR REPLACE FUNCTION hash_password(password TEXT)
RETURNS TEXT AS $$
BEGIN
  RETURN encode(digest(password, 'sha256'), 'hex');
END;
$$ LANGUAGE plpgsql;

-- ÿØÿßŸÑÿ© ŸÑŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±
CREATE OR REPLACE FUNCTION verify_password(password TEXT, password_hash TEXT)
RETURNS BOOLEAN AS $$
BEGIN
  RETURN encode(digest(password, 'sha256'), 'hex') = password_hash;
END;
$$ LANGUAGE plpgsql;

-- ÿØÿßŸÑÿ© ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑŸàŸÇÿ™ ÿßŸÑŸÖÿµÿ±Ÿä (UTC+2)
CREATE OR REPLACE FUNCTION get_egyptian_time()
RETURNS TEXT AS $$
BEGIN
  RETURN TO_CHAR(NOW() AT TIME ZONE 'Africa/Cairo', 'YYYY-MM-DD HH24:MI:SS');
END;
$$ LANGUAGE plpgsql;

-- ÿØÿßŸÑÿ© ŸÑÿ™ÿ≠ÿØŸäÿ´ updated_at ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- ÿØÿßŸÑÿ© ŸÑŸÅÿ≠ÿµ ÿßŸÑŸÉŸÖŸäÿ© ÿßŸÑŸÖŸÜÿÆŸÅÿ∂ÿ© Ÿàÿ•ÿ±ÿ≥ÿßŸÑ ÿ•ÿ¥ÿπÿßÿ±
CREATE OR REPLACE FUNCTION check_low_stock()
RETURNS TRIGGER AS $$
BEGIN
  -- ŸÅÿ≠ÿµ ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ÿßŸÑŸÉŸÖŸäÿ© ÿ£ŸÇŸÑ ŸÖŸÜ ÿ£Ÿà ÿ™ÿ≥ÿßŸàŸä ÿßŸÑÿ≠ÿØ ÿßŸÑÿ£ÿØŸÜŸâ
  IF NEW.quantity <= NEW.min_quantity AND (OLD.quantity IS NULL OR OLD.quantity > NEW.min_quantity) THEN
    -- ÿ•ŸÜÿ¥ÿßÿ° ÿ•ÿ¥ÿπÿßÿ± ŸÑÿ¨ŸÖŸäÿπ ÿßŸÑŸÖÿØŸäÿ±ŸäŸÜ
    INSERT INTO notifications (user_id, type, message, details)
    SELECT 
      u.id,
      'warning',
      'ÿ™ÿ≠ÿ∞Ÿäÿ±: ŸÉŸÖŸäÿ© ŸÖŸÜÿÆŸÅÿ∂ÿ© ŸÑŸÑÿπŸÜÿµÿ± "' || NEW.name || '"',
      jsonb_build_object(
        'item_id', NEW.id,
        'item_name', NEW.name,
        'current_quantity', NEW.quantity,
        'min_quantity', NEW.min_quantity,
        'warehouse_id', NEW.warehouse_id
      )
    FROM users u
    WHERE u.role = 'admin' AND u.is_active = TRUE;
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- ÿØÿßŸÑÿ© ŸÑÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑŸÖÿπÿßŸÖŸÑÿßÿ™ ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã ÿπŸÜÿØ ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑŸÉŸÖŸäÿ©
CREATE OR REPLACE FUNCTION log_quantity_change()
RETURNS TRIGGER AS $$
DECLARE
  quantity_diff INTEGER;
  trans_type VARCHAR(50);
BEGIN
  -- ÿ≠ÿ≥ÿßÿ® ÿßŸÑŸÅÿ±ŸÇ ŸÅŸä ÿßŸÑŸÉŸÖŸäÿ©
  quantity_diff := NEW.quantity - OLD.quantity;
  
  -- ÿ™ÿ≠ÿØŸäÿØ ŸÜŸàÿπ ÿßŸÑŸÖÿπÿßŸÖŸÑÿ©
  IF quantity_diff > 0 THEN
    trans_type := 'in';
  ELSIF quantity_diff < 0 THEN
    trans_type := 'out';
  ELSE
    RETURN NEW; -- ŸÑÿß ÿ™ÿ∫ŸäŸäÿ± ŸÅŸä ÿßŸÑŸÉŸÖŸäÿ©
  END IF;
  
  -- ÿ•ÿØÿ±ÿßÿ¨ ÿ≥ÿ¨ŸÑ ÿßŸÑŸÖÿπÿßŸÖŸÑÿ© ŸÅŸä ÿ¨ÿØŸàŸÑ transactions
  INSERT INTO transactions (
    item_id,
    user_id,
    transaction_type,
    quantity,
    quantity_before,
    quantity_after,
    notes,
    egyptian_timestamp
  ) VALUES (
    NEW.id,
    NULL, -- ÿ≥Ÿäÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´Ÿá ŸÖŸÜ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ
    trans_type,
    ABS(quantity_diff),
    OLD.quantity,
    NEW.quantity,
    'ÿ™ŸÖ ÿßŸÑÿ™ÿ≥ÿ¨ŸäŸÑ ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã ÿπŸÜÿØ ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑŸÉŸÖŸäÿ©',
    get_egyptian_time()
  );
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- ÿØÿßŸÑÿ© ŸÑÿ≠ÿ≥ÿßÿ® ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ŸàÿØÿπ
CREATE OR REPLACE FUNCTION get_warehouse_stats(warehouse_id_param BIGINT)
RETURNS TABLE(
  total_items BIGINT,
  total_quantity BIGINT,
  low_stock_items BIGINT,
  categories_count BIGINT
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    COUNT(*)::BIGINT as total_items,
    COALESCE(SUM(quantity), 0)::BIGINT as total_quantity,
    COUNT(CASE WHEN quantity <= min_quantity THEN 1 END)::BIGINT as low_stock_items,
    COUNT(DISTINCT category_id)::BIGINT as categories_count
  FROM items
  WHERE items.warehouse_id = warehouse_id_param;
END;
$$ LANGUAGE plpgsql;

-- ============================================
-- ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© 5: Triggers
-- ============================================

-- Trigger ŸÑÿ™ÿ≠ÿØŸäÿ´ updated_at ÿπŸÑŸâ ÿßŸÑÿ¨ÿØÿßŸàŸÑ
CREATE TRIGGER update_warehouses_updated_at
BEFORE UPDATE ON warehouses
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_categories_updated_at
BEFORE UPDATE ON categories
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_users_updated_at
BEFORE UPDATE ON users
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_items_updated_at
BEFORE UPDATE ON items
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Trigger ŸÑÿ™ÿ≠ÿØŸäÿ´ updated_at ÿπŸÑŸâ ÿ¨ÿØÿßŸàŸÑ ÿßŸÑÿ¨ÿ±ÿØ
CREATE TRIGGER update_inventory_audits_updated_at
BEFORE UPDATE ON inventory_audits
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Trigger ŸÑŸÅÿ≠ÿµ ÿßŸÑŸÉŸÖŸäÿ© ÿßŸÑŸÖŸÜÿÆŸÅÿ∂ÿ©
CREATE TRIGGER trigger_check_low_stock
AFTER INSERT OR UPDATE OF quantity ON items
FOR EACH ROW
EXECUTE FUNCTION check_low_stock();

-- ============================================
-- ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© 6: Row Level Security (RLS)
-- ============================================

-- ÿ™ŸÅÿπŸäŸÑ RLS ÿπŸÑŸâ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ¨ÿØÿßŸàŸÑ
ALTER TABLE warehouses ENABLE ROW LEVEL SECURITY;
ALTER TABLE categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE items ENABLE ROW LEVEL SECURITY;
ALTER TABLE transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE audit_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE daily_audits ENABLE ROW LEVEL SECURITY;
ALTER TABLE inventory_audits ENABLE ROW LEVEL SECURITY;
ALTER TABLE audit_details ENABLE ROW LEVEL SECURITY;

-- ÿ≥Ÿäÿßÿ≥ÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ŸàÿØÿπÿßÿ™ - ÿßŸÑÿ≥ŸÖÿßÿ≠ ÿ®ÿßŸÑŸàÿµŸàŸÑ ÿßŸÑŸÉÿßŸÖŸÑ (ŸÑŸÑÿ™ÿ∑ŸàŸäÿ±)
CREATE POLICY "Allow public read access to warehouses" ON warehouses
  FOR SELECT USING (true);

CREATE POLICY "Allow public insert to warehouses" ON warehouses
  FOR INSERT WITH CHECK (true);

CREATE POLICY "Allow public update to warehouses" ON warehouses
  FOR UPDATE USING (true);

CREATE POLICY "Allow public delete to warehouses" ON warehouses
  FOR DELETE USING (true);

-- ÿ≥Ÿäÿßÿ≥ÿßÿ™ ÿßŸÑŸÅÿ¶ÿßÿ™ - ÿßŸÑÿ≥ŸÖÿßÿ≠ ÿ®ÿßŸÑŸàÿµŸàŸÑ ÿßŸÑŸÉÿßŸÖŸÑ
CREATE POLICY "Allow public read access to categories" ON categories
  FOR SELECT USING (true);

CREATE POLICY "Allow public insert to categories" ON categories
  FOR INSERT WITH CHECK (true);

CREATE POLICY "Allow public update to categories" ON categories
  FOR UPDATE USING (true);

CREATE POLICY "Allow public delete to categories" ON categories
  FOR DELETE USING (true);

-- ÿ≥Ÿäÿßÿ≥ÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ - ÿßŸÑÿ≥ŸÖÿßÿ≠ ÿ®ÿßŸÑŸàÿµŸàŸÑ ÿßŸÑŸÉÿßŸÖŸÑ
CREATE POLICY "Allow public read access to users" ON users
  FOR SELECT USING (true);

CREATE POLICY "Allow public insert to users" ON users
  FOR INSERT WITH CHECK (true);

CREATE POLICY "Allow public update to users" ON users
  FOR UPDATE USING (true);

CREATE POLICY "Allow public delete to users" ON users
  FOR DELETE USING (true);

-- ÿ≥Ÿäÿßÿ≥ÿßÿ™ ÿßŸÑÿπŸÜÿßÿµÿ± - ÿßŸÑÿ≥ŸÖÿßÿ≠ ÿ®ÿßŸÑŸàÿµŸàŸÑ ÿßŸÑŸÉÿßŸÖŸÑ
CREATE POLICY "Allow public read access to items" ON items
  FOR SELECT USING (true);

CREATE POLICY "Allow public insert to items" ON items
  FOR INSERT WITH CHECK (true);

CREATE POLICY "Allow public update to items" ON items
  FOR UPDATE USING (true);

CREATE POLICY "Allow public delete to items" ON items
  FOR DELETE USING (true);

-- ÿ≥Ÿäÿßÿ≥ÿßÿ™ ÿßŸÑŸÖÿπÿßŸÖŸÑÿßÿ™ - ÿßŸÑÿ≥ŸÖÿßÿ≠ ÿ®ÿßŸÑŸàÿµŸàŸÑ ÿßŸÑŸÉÿßŸÖŸÑ
CREATE POLICY "Allow public read access to transactions" ON transactions
  FOR SELECT USING (true);

CREATE POLICY "Allow public insert to transactions" ON transactions
  FOR INSERT WITH CHECK (true);

CREATE POLICY "Allow public update to transactions" ON transactions
  FOR UPDATE USING (true);

CREATE POLICY "Allow public delete to transactions" ON transactions
  FOR DELETE USING (true);

-- ÿ≥Ÿäÿßÿ≥ÿßÿ™ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ - ÿßŸÑÿ≥ŸÖÿßÿ≠ ÿ®ÿßŸÑŸàÿµŸàŸÑ ÿßŸÑŸÉÿßŸÖŸÑ
CREATE POLICY "Allow public read access to notifications" ON notifications
  FOR SELECT USING (true);

CREATE POLICY "Allow public insert to notifications" ON notifications
  FOR INSERT WITH CHECK (true);

CREATE POLICY "Allow public update to notifications" ON notifications
  FOR UPDATE USING (true);

CREATE POLICY "Allow public delete to notifications" ON notifications
  FOR DELETE USING (true);

-- ÿ≥Ÿäÿßÿ≥ÿßÿ™ ÿ≥ÿ¨ŸÑ ÿßŸÑÿ™ÿØŸÇŸäŸÇ - ÿßŸÑÿ≥ŸÖÿßÿ≠ ÿ®ÿßŸÑŸàÿµŸàŸÑ ÿßŸÑŸÉÿßŸÖŸÑ
CREATE POLICY "Allow public read access to audit_logs" ON audit_logs
  FOR SELECT USING (true);

CREATE POLICY "Allow public insert to audit_logs" ON audit_logs
  FOR INSERT WITH CHECK (true);

CREATE POLICY "Allow public update to audit_logs" ON audit_logs
  FOR UPDATE USING (true);

CREATE POLICY "Allow public delete to audit_logs" ON audit_logs
  FOR DELETE USING (true);

-- ÿ≥Ÿäÿßÿ≥ÿßÿ™ ÿπŸÖŸÑŸäÿßÿ™ ÿßŸÑÿ¨ÿ±ÿØ - ÿßŸÑÿ≥ŸÖÿßÿ≠ ÿ®ÿßŸÑŸàÿµŸàŸÑ ÿßŸÑŸÉÿßŸÖŸÑ (ŸÑŸÑÿ™ÿ∑ŸàŸäÿ±)
CREATE POLICY "Allow public read access to inventory_audits" ON inventory_audits
  FOR SELECT USING (true);

CREATE POLICY "Allow public insert to inventory_audits" ON inventory_audits
  FOR INSERT WITH CHECK (true);

CREATE POLICY "Allow public update to inventory_audits" ON inventory_audits
  FOR UPDATE USING (true);

CREATE POLICY "Allow public delete to inventory_audits" ON inventory_audits
  FOR DELETE USING (true);

-- ÿ≥Ÿäÿßÿ≥ÿßÿ™ ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿ¨ÿ±ÿØ - ÿßŸÑÿ≥ŸÖÿßÿ≠ ÿ®ÿßŸÑŸàÿµŸàŸÑ ÿßŸÑŸÉÿßŸÖŸÑ (ŸÑŸÑÿ™ÿ∑ŸàŸäÿ±)
CREATE POLICY "Allow public read access to audit_details" ON audit_details
  FOR SELECT USING (true);

CREATE POLICY "Allow public insert to audit_details" ON audit_details
  FOR INSERT WITH CHECK (true);

CREATE POLICY "Allow public update to audit_details" ON audit_details
  FOR UPDATE USING (true);

CREATE POLICY "Allow public delete to audit_details" ON audit_details
  FOR DELETE USING (true);

-- ÿ≥Ÿäÿßÿ≥ÿßÿ™ ÿßŸÑŸÖÿ±ÿßÿ¨ÿπÿßÿ™ ÿßŸÑŸäŸàŸÖŸäÿ© - ÿßŸÑÿ≥ŸÖÿßÿ≠ ÿ®ÿßŸÑŸàÿµŸàŸÑ ÿßŸÑŸÉÿßŸÖŸÑ
CREATE POLICY "Allow public read access to daily_audits" ON daily_audits
  FOR SELECT USING (true);

CREATE POLICY "Allow public insert to daily_audits" ON daily_audits
  FOR INSERT WITH CHECK (true);

CREATE POLICY "Allow public update to daily_audits" ON daily_audits
  FOR UPDATE USING (true);

CREATE POLICY "Allow public delete to daily_audits" ON daily_audits
  FOR DELETE USING (true);

-- ============================================
-- ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© 7: ÿ•ÿØÿ±ÿßÿ¨ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©
-- ============================================

-- ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖÿÆÿßÿ≤ŸÜ (12 ŸÖÿÆÿ≤ŸÜ)
INSERT INTO warehouses (id, name, description) VALUES
  (1, 'ÿßŸÑŸÖÿÆÿ≤ŸÜ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä', 'ÿßŸÑŸÖÿÆÿ≤ŸÜ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä ŸÑŸÑŸÖÿØÿ±ÿ≥ÿ©'),
  (2, 'ŸÖÿÆÿ≤ŸÜ ÿßŸÑŸÖÿÆÿ™ÿ®ÿ±', 'ŸÖÿÆÿ≤ŸÜ ŸÖÿπÿØÿßÿ™ ÿßŸÑŸÖÿÆÿ™ÿ®ÿ±'),
  (3, 'ŸÖÿÆÿ≤ŸÜ ÿßŸÑŸÖŸÉÿ™ÿ®ÿ©', 'ŸÖÿÆÿ≤ŸÜ ŸÉÿ™ÿ® ÿßŸÑŸÖŸÉÿ™ÿ®ÿ©'),
  (4, 'ŸÖÿÆÿ≤ŸÜ ÿßŸÑŸÖŸÑÿßÿ®ÿ≥', 'ŸÖÿÆÿ≤ŸÜ ŸÖŸÑÿßÿ®ÿ≥ ÿßŸÑÿ∑ŸÑÿßÿ®'),
  (5, 'ŸÖÿÆÿ≤ŸÜ ÿßŸÑÿ£ÿ´ÿßÿ´', 'ŸÖÿÆÿ≤ŸÜ ÿ£ÿ´ÿßÿ´ ÿßŸÑŸÖÿØÿ±ÿ≥ÿ©'),
  (6, 'ŸÖÿÆÿ≤ŸÜ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäÿßÿ™', 'ŸÖÿÆÿ≤ŸÜ ÿßŸÑÿ£ÿ¨Ÿáÿ≤ÿ© ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäÿ©'),
  (7, 'ŸÖÿÆÿ≤ŸÜ ÿßŸÑÿ£ÿØŸàÿßÿ™', 'ŸÖÿÆÿ≤ŸÜ ÿßŸÑÿ£ÿØŸàÿßÿ™ ÿßŸÑŸÖÿØÿ±ÿ≥Ÿäÿ©'),
  (8, 'ŸÖÿÆÿ≤ŸÜ ÿßŸÑŸÖŸàÿßÿØ ÿßŸÑÿ∫ÿ∞ÿßÿ¶Ÿäÿ©', 'ŸÖÿÆÿ≤ŸÜ ÿßŸÑŸÖŸàÿßÿØ ÿßŸÑÿ∫ÿ∞ÿßÿ¶Ÿäÿ© ŸÑŸÑŸÖŸÇŸáŸâ'),
  (9, 'ŸÖÿÆÿ≤ŸÜ ÿßŸÑÿ™ŸÜÿ∏ŸäŸÅ', 'ŸÖÿÆÿ≤ŸÜ ŸÖŸàÿßÿØ ÿßŸÑÿ™ŸÜÿ∏ŸäŸÅ'),
  (10, 'ŸÖÿÆÿ≤ŸÜ ÿßŸÑÿ±Ÿäÿßÿ∂ÿ©', 'ŸÖÿÆÿ≤ŸÜ ŸÖÿπÿØÿßÿ™ ÿßŸÑÿ±Ÿäÿßÿ∂ÿ©'),
  (11, 'ŸÖÿÆÿ≤ŸÜ ÿßŸÑŸÅŸÜŸàŸÜ', 'ŸÖÿÆÿ≤ŸÜ ŸÖÿ≥ÿ™ŸÑÿ≤ŸÖÿßÿ™ ÿßŸÑŸÅŸÜŸàŸÜ'),
  (12, 'ŸÖÿÆÿ≤ŸÜ ÿßŸÑÿ•ÿ≥ÿπÿßŸÅÿßÿ™', 'ŸÖÿÆÿ≤ŸÜ ŸÖÿ≥ÿ™ŸÑÿ≤ŸÖÿßÿ™ ÿßŸÑÿ•ÿ≥ÿπÿßŸÅÿßÿ™ ÿßŸÑÿ£ŸàŸÑŸäÿ©');

-- ÿ™ÿ≠ÿØŸäÿ´ sequence ŸÑŸÑŸÖÿÆÿßÿ≤ŸÜ
SELECT setval('warehouses_id_seq', 12, true);

-- ÿ•ŸÜÿ¥ÿßÿ° ŸÅÿ¶ÿßÿ™ ÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ©
INSERT INTO categories (id, name, description) VALUES
  (1, 'ÿ£ÿØŸàÿßÿ™ ŸÖÿØÿ±ÿ≥Ÿäÿ©', 'ÿ£ÿØŸàÿßÿ™ ŸÖÿØÿ±ÿ≥Ÿäÿ© ŸÖÿ™ŸÜŸàÿπÿ©'),
  (2, 'ŸÖÿπÿØÿßÿ™ ÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäÿ©', 'ÿ£ÿ¨Ÿáÿ≤ÿ© ÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäÿ© ŸàŸÖŸÑÿ≠ŸÇÿßÿ™Ÿáÿß'),
  (3, 'ÿ£ÿØŸàÿßÿ™ ÿ™ŸÜÿ∏ŸäŸÅ', 'ŸÖŸàÿßÿØ ŸàŸÖÿ≥ÿ™ŸÑÿ≤ŸÖÿßÿ™ ÿßŸÑÿ™ŸÜÿ∏ŸäŸÅ'),
  (4, 'ŸÖÿ≥ÿ™ŸÑÿ≤ŸÖÿßÿ™ ÿßŸÑŸÖŸÉÿ™ÿ®', 'ŸÖÿ≥ÿ™ŸÑÿ≤ŸÖÿßÿ™ ÿßŸÑŸÖŸÉÿ™ÿ® ŸàÿßŸÑŸÇÿ±ÿ∑ÿßÿ≥Ÿäÿ©'),
  (5, 'ŸÖÿπÿØÿßÿ™ ŸÖÿÆÿ™ÿ®ÿ± ŸÉŸäŸÖŸäÿßÿ°', 'ŸÖÿπÿØÿßÿ™ ŸàŸÖÿπÿØÿßÿ™ ŸÖÿÆÿ™ÿ®ÿ± ÿßŸÑŸÉŸäŸÖŸäÿßÿ°'),
  (6, 'ŸÖÿπÿØÿßÿ™ ŸÖÿÆÿ™ÿ®ÿ± ŸÅŸäÿ≤Ÿäÿßÿ°', 'ŸÖÿπÿØÿßÿ™ ŸàŸÖÿπÿØÿßÿ™ ŸÖÿÆÿ™ÿ®ÿ± ÿßŸÑŸÅŸäÿ≤Ÿäÿßÿ°'),
  (7, 'ŸÖÿπÿØÿßÿ™ ŸÖÿÆÿ™ÿ®ÿ± ÿ®ŸäŸàŸÑŸàÿ¨Ÿäÿß', 'ŸÖÿπÿØÿßÿ™ ŸàŸÖÿπÿØÿßÿ™ ŸÖÿÆÿ™ÿ®ÿ± ÿßŸÑÿ®ŸäŸàŸÑŸàÿ¨Ÿäÿß'),
  (8, 'ŸÉÿ™ÿ® ÿØÿ±ÿßÿ≥Ÿäÿ©', 'ŸÉÿ™ÿ® ÿØÿ±ÿßÿ≥Ÿäÿ© ŸÑŸÑŸÖŸÜÿßŸáÿ¨ ÿßŸÑÿØÿ±ÿßÿ≥Ÿäÿ©'),
  (9, 'ŸÉÿ™ÿ® ŸÖÿ±ÿ¨ÿπŸäÿ©', 'ŸÉÿ™ÿ® ŸÖÿ±ÿ¨ÿπŸäÿ© ŸàŸÖŸàÿ≥Ÿàÿπÿßÿ™'),
  (10, 'ŸÖÿ¨ŸÑÿßÿ™', 'ŸÖÿ¨ŸÑÿßÿ™ ÿπŸÑŸÖŸäÿ© Ÿàÿ´ŸÇÿßŸÅŸäÿ©'),
  (11, 'ÿ≤Ÿä ŸÖÿØÿ±ÿ≥Ÿä', 'ÿßŸÑÿ≤Ÿä ÿßŸÑÿ±ÿ≥ŸÖŸä ŸÑŸÑÿ∑ŸÑÿßÿ®'),
  (12, 'ÿ®ÿØŸÑÿßÿ™ ÿ±Ÿäÿßÿ∂ÿ©', 'ÿ®ÿØŸÑÿßÿ™ ÿßŸÑÿ±Ÿäÿßÿ∂ÿ© ŸàÿßŸÑŸÜÿ¥ÿßÿ∑ÿßÿ™'),
  (13, 'ŸÖŸÉÿßÿ™ÿ®', 'ÿßŸÑŸÖŸÉÿßÿ™ÿ® ŸàÿßŸÑÿ£ÿ´ÿßÿ´ ÿßŸÑŸÖÿØÿ±ÿ≥Ÿä'),
  (14, 'ŸÉÿ±ÿßÿ≥Ÿä', 'ÿßŸÑŸÉÿ±ÿßÿ≥Ÿä ŸàÿßŸÑÿ£ÿ´ÿßÿ´ ÿßŸÑŸÖÿØÿ±ÿ≥Ÿä'),
  (15, 'ÿ£ŸÑŸàÿßÿ≠', 'ÿßŸÑÿ£ŸÑŸàÿßÿ≠ ÿßŸÑÿØÿ±ÿßÿ≥Ÿäÿ© ŸàÿßŸÑÿ™ÿπŸÑŸäŸÖŸäÿ©'),
  (16, 'ÿ≠ÿßÿ≥ÿ®ÿßÿ™', 'ÿßŸÑÿ≠ÿßÿ≥ÿ®ÿßÿ™ ŸàÿßŸÑÿ¢ŸÑÿßÿ™ ÿßŸÑÿ≠ÿßÿ≥ÿ®ÿ©'),
  (17, 'ÿ≥ŸÖÿßÿπÿßÿ™', 'ÿßŸÑÿ≥ŸÖÿßÿπÿßÿ™ ŸàÿßŸÑÿ•ŸÉÿ≥ÿ≥Ÿàÿßÿ±ÿßÿ™ ÿßŸÑÿµŸàÿ™Ÿäÿ©'),
  (18, 'ÿ¥ÿßÿ¥ÿßÿ™', 'ÿßŸÑÿ¥ÿßÿ¥ÿßÿ™ Ÿàÿ£ÿ¨Ÿáÿ≤ÿ© ÿßŸÑÿπÿ±ÿ∂'),
  (19, 'ŸÖÿ≥ÿßÿ∑ÿ±', 'ÿßŸÑŸÖÿ≥ÿßÿ∑ÿ± ŸàÿßŸÑÿ£ÿØŸàÿßÿ™ ÿßŸÑŸÇŸäÿßÿ≥Ÿäÿ©'),
  (20, 'ÿ£ŸÇŸÑÿßŸÖ', 'ÿßŸÑÿ£ŸÇŸÑÿßŸÖ Ÿàÿ£ŸÜŸàÿßÿπŸáÿß'),
  (21, 'ŸÉÿ±ÿßÿ≥ÿßÿ™', 'ÿßŸÑŸÉÿ±ÿßÿ≥ÿßÿ™ ŸàÿßŸÑÿØŸÅÿßÿ™ÿ± ÿßŸÑÿØÿ±ÿßÿ≥Ÿäÿ©'),
  (22, 'Ÿàÿ¨ÿ®ÿßÿ™ ÿÆŸÅŸäŸÅÿ©', 'ÿßŸÑŸàÿ¨ÿ®ÿßÿ™ ÿßŸÑÿÆŸÅŸäŸÅÿ© ŸàÿßŸÑŸÖÿØÿßÿ±ÿ≥'),
  (23, 'ŸÖÿ¥ÿ±Ÿàÿ®ÿßÿ™', 'ÿßŸÑŸÖÿ¥ÿ±Ÿàÿ®ÿßÿ™ ŸàÿßŸÑÿ≥Ÿàÿßÿ¶ŸÑ'),
  (24, 'ŸÖŸÜÿ∏ŸÅÿßÿ™', 'ÿßŸÑŸÖŸÜÿ∏ŸÅÿßÿ™ ŸàÿßŸÑŸÖŸàÿßÿØ ÿßŸÑŸÉŸäŸÖŸäÿßÿ¶Ÿäÿ©'),
  (25, 'ŸÖŸÜÿßÿØŸäŸÑ', 'ÿßŸÑŸÖŸÜÿßÿØŸäŸÑ ŸàÿßŸÑŸàÿ±ŸÇ ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑŸàÿßÿ≠ÿØ');

-- ÿ™ÿ≠ÿØŸäÿ´ sequence ŸÑŸÑŸÅÿ¶ÿßÿ™
SELECT setval('categories_id_seq', 25, true);

-- ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ (1 admin + 12 employee)
-- ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± = ÿ¢ÿÆÿ± 6 ÿ£ÿ±ŸÇÿßŸÖ ŸÖŸÜ ÿßŸÑÿ±ŸÇŸÖ ÿßŸÑŸÇŸàŸÖŸä (ŸÖÿ¥ŸÅÿ±ÿ© ÿ®ŸÄ SHA-256)
INSERT INTO users (id, national_id, name, password_hash, role, warehouse_id) VALUES
  (1, '12345678901234', 'ŸÖÿØŸäÿ± ÿßŸÑŸÜÿ∏ÿßŸÖ', hash_password('901234'), 'admin', NULL),
  (2, '11111111111111', 'ŸÖŸàÿ∏ŸÅ ÿßŸÑŸÖÿÆÿ≤ŸÜ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä', hash_password('111111'), 'employee', 1),
  (3, '22222222222222', 'ŸÖŸàÿ∏ŸÅ ŸÖÿÆÿ™ÿ®ÿ±', hash_password('222222'), 'employee', 2),
  (4, '33333333333333', 'ŸÖŸàÿ∏ŸÅ ŸÖŸÉÿ™ÿ®ÿ©', hash_password('333333'), 'employee', 3),
  (5, '44444444444444', 'ŸÖŸàÿ∏ŸÅ ŸÖŸÑÿßÿ®ÿ≥', hash_password('444444'), 'employee', 4),
  (6, '55555555555555', 'ŸÖŸàÿ∏ŸÅ ÿ£ÿ´ÿßÿ´', hash_password('555555'), 'employee', 5),
  (7, '66666666666666', 'ŸÖŸàÿ∏ŸÅ ÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäÿßÿ™', hash_password('666666'), 'employee', 6),
  (8, '77777777777777', 'ŸÖŸàÿ∏ŸÅ ÿ£ÿØŸàÿßÿ™', hash_password('777777'), 'employee', 7),
  (9, '88888888888888', 'ŸÖŸàÿ∏ŸÅ ŸÖŸàÿßÿØ ÿ∫ÿ∞ÿßÿ¶Ÿäÿ©', hash_password('888888'), 'employee', 8),
  (10, '99999999999999', 'ŸÖŸàÿ∏ŸÅ ÿ™ŸÜÿ∏ŸäŸÅ', hash_password('999999'), 'employee', 9),
  (11, '10101010101010', 'ŸÖŸàÿ∏ŸÅ ÿ±Ÿäÿßÿ∂ÿ©', hash_password('101010'), 'employee', 10),
  (12, '11111111111112', 'ŸÖŸàÿ∏ŸÅ ŸÅŸÜŸàŸÜ', hash_password('111112'), 'employee', 11),
  (13, '12121212121212', 'ŸÖŸàÿ∏ŸÅ ÿ•ÿ≥ÿπÿßŸÅÿßÿ™', hash_password('121212'), 'employee', 12);

-- ÿ™ÿ≠ÿØŸäÿ´ sequence ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ
SELECT setval('users_id_seq', 13, true);

-- ÿ•ŸÜÿ¥ÿßÿ° ÿπŸÜÿßÿµÿ± ÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ©
INSERT INTO items (name, description, quantity, unit, category_id, warehouse_id, min_quantity) VALUES
  ('ÿ£ŸÇŸÑÿßŸÖ ÿ¨ÿßŸÅ ÿ£ÿ≤ÿ±ŸÇ', 'ÿ£ŸÇŸÑÿßŸÖ ÿ¨ÿßŸÅ ŸÑŸàŸÜ ÿ£ÿ≤ÿ±ŸÇ - ÿπÿ®Ÿàÿ© 50 ŸÇŸÑŸÖ', 500, 'ŸÇŸÑŸÖ', 1, 1, 100),
  ('ÿØŸÅÿßÿ™ÿ± 100 Ÿàÿ±ŸÇÿ©', 'ÿØŸÅÿßÿ™ÿ± ŸÖÿ≥ÿ∑ÿ±ÿ© 100 Ÿàÿ±ŸÇÿ©', 300, 'ÿØŸÅÿ™ÿ±', 1, 1, 50),
  ('ŸÖŸÉÿßÿ™ÿ® ÿÆÿ¥ÿ®Ÿäÿ©', 'ŸÖŸÉÿßÿ™ÿ® ÿÆÿ¥ÿ®Ÿäÿ© ŸÑŸÑÿ∑ŸÑÿßÿ®', 50, 'ŸÇÿ∑ÿπÿ©', 2, 1, 10),
  ('ŸÉÿ±ÿßÿ≥Ÿä ÿ®ŸÑÿßÿ≥ÿ™ŸäŸÉ', 'ŸÉÿ±ÿßÿ≥Ÿä ÿ®ŸÑÿßÿ≥ÿ™ŸäŸÉ ŸÑŸÑÿ∑ŸÑÿßÿ®', 100, 'ŸÇÿ∑ÿπÿ©', 2, 1, 20),
  ('ÿ£ÿ¨Ÿáÿ≤ÿ© ŸÉŸÖÿ®ŸäŸàÿ™ÿ±', 'ÿ£ÿ¨Ÿáÿ≤ÿ© ŸÉŸÖÿ®ŸäŸàÿ™ÿ± ŸÖŸÉÿ™ÿ®Ÿäÿ©', 25, 'ÿ¨Ÿáÿßÿ≤', 3, 1, 5),
  ('ŸÖŸàÿßÿØ ÿ™ŸÜÿ∏ŸäŸÅ', 'ŸÖŸàÿßÿØ ÿ™ŸÜÿ∏ŸäŸÅ ŸÖÿ™ŸÜŸàÿπÿ©', 150, 'ÿπÿ®Ÿàÿ©', 4, 1, 30),
  ('ŸÉÿ™ÿ® ÿ±Ÿäÿßÿ∂Ÿäÿßÿ™', 'ŸÉÿ™ÿ® ÿ±Ÿäÿßÿ∂Ÿäÿßÿ™ ŸÑŸÑÿµŸÅ ÿßŸÑÿ£ŸàŸÑ', 200, 'ŸÉÿ™ÿßÿ®', 5, 1, 40);

-- ============================================
-- ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© 8: ÿ•ŸÜÿ¥ÿßÿ° Views ŸÖŸÅŸäÿØÿ©
-- ============================================

-- ÿπÿ±ÿ∂ ŸÑŸÑÿπŸÜÿßÿµÿ± ŸÖÿπ ŸÖÿπŸÑŸàŸÖÿßÿ™ ŸÉÿßŸÖŸÑÿ©
CREATE OR REPLACE VIEW items_full_view AS
SELECT 
  i.id,
  i.name,
  i.description,
  i.quantity,
  i.unit,
  i.min_quantity,
  i.max_quantity,
  i.barcode,
  c.name as category_name,
  c.id as category_id,
  w.name as warehouse_name,
  w.id as warehouse_id,
  w.location as warehouse_location,
  CASE 
    WHEN i.quantity <= i.min_quantity THEN 'low'
    WHEN i.max_quantity IS NOT NULL AND i.quantity >= i.max_quantity THEN 'high'
    ELSE 'normal'
  END as stock_status,
  i.created_at,
  i.updated_at
FROM items i
LEFT JOIN categories c ON i.category_id = c.id
LEFT JOIN warehouses w ON i.warehouse_id = w.id;

-- ÿπÿ±ÿ∂ ŸÑŸÑŸÖÿπÿßŸÖŸÑÿßÿ™ ŸÖÿπ ŸÖÿπŸÑŸàŸÖÿßÿ™ ŸÉÿßŸÖŸÑÿ©
CREATE OR REPLACE VIEW transactions_full_view AS
SELECT 
  t.id,
  t.transaction_type,
  t.quantity,
  t.quantity_before,
  t.quantity_after,
  t.recipient,
  t.notes,
  t.discrepancy,
  t.egyptian_timestamp,
  i.name as item_name,
  i.id as item_id,
  u.name as user_name,
  u.id as user_id,
  w.name as warehouse_name,
  w.id as warehouse_id,
  t.created_at
FROM transactions t
LEFT JOIN items i ON t.item_id = i.id
LEFT JOIN users u ON t.user_id = u.id
LEFT JOIN warehouses w ON i.warehouse_id = w.id;

-- ÿπÿ±ÿ∂ ŸÑŸÑÿπŸÜÿßÿµÿ± ÿ∞ÿßÿ™ ÿßŸÑŸÖÿÆÿ≤ŸàŸÜ ÿßŸÑŸÖŸÜÿÆŸÅÿ∂
CREATE OR REPLACE VIEW low_stock_items_view AS
SELECT 
  i.*,
  w.name as warehouse_name,
  c.name as category_name
FROM items i
LEFT JOIN warehouses w ON i.warehouse_id = w.id
LEFT JOIN categories c ON i.category_id = c.id
WHERE i.quantity <= i.min_quantity
ORDER BY i.quantity ASC;

-- ÿπÿ±ÿ∂ ŸÑÿπŸÖŸÑŸäÿßÿ™ ÿßŸÑÿ¨ÿ±ÿØ ŸÖÿπ ŸÖÿπŸÑŸàŸÖÿßÿ™ ŸÉÿßŸÖŸÑÿ©
CREATE OR REPLACE VIEW inventory_audits_full_view AS
SELECT 
  ia.id,
  ia.audit_type,
  ia.status,
  ia.notes,
  ia.started_at,
  ia.completed_at,
  ia.egyptian_timestamp,
  w.name as warehouse_name,
  w.id as warehouse_id,
  u.name as user_name,
  u.id as user_id,
  ia.created_at,
  ia.updated_at
FROM inventory_audits ia
LEFT JOIN warehouses w ON ia.warehouse_id = w.id
LEFT JOIN users u ON ia.user_id = u.id;

-- ÿπÿ±ÿ∂ ŸÑÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿ¨ÿ±ÿØ ŸÖÿπ ŸÖÿπŸÑŸàŸÖÿßÿ™ ŸÉÿßŸÖŸÑÿ©
CREATE OR REPLACE VIEW audit_details_full_view AS
SELECT 
  ad.id,
  ad.inventory_audit_id,
  ad.expected_quantity,
  ad.actual_quantity,
  ad.discrepancy,
  ad.status as detail_status,
  ad.notes,
  i.name as item_name,
  i.id as item_id,
  ia.audit_type,
  ia.status as audit_status,
  w.name as warehouse_name,
  w.id as warehouse_id,
  u.name as user_name,
  u.id as user_id,
  ad.created_at
FROM audit_details ad
LEFT JOIN inventory_audits ia ON ad.inventory_audit_id = ia.id
LEFT JOIN items i ON ad.item_id = i.id
LEFT JOIN warehouses w ON i.warehouse_id = w.id
LEFT JOIN users u ON ia.user_id = u.id;

-- ÿπÿ±ÿ∂ ŸÑŸÑŸÖÿ±ÿßÿ¨ÿπÿßÿ™ ÿßŸÑŸäŸàŸÖŸäÿ© ŸÖÿπ ŸÖÿπŸÑŸàŸÖÿßÿ™ ŸÉÿßŸÖŸÑÿ©
CREATE OR REPLACE VIEW daily_audits_full_view AS
SELECT 
  da.id,
  da.expected_quantity,
  da.actual_quantity,
  da.discrepancy,
  da.notes,
  da.audit_date,
  da.egyptian_timestamp,
  i.name as item_name,
  i.id as item_id,
  w.name as warehouse_name,
  w.id as warehouse_id,
  u.name as user_name,
  u.id as user_id,
  da.created_at
FROM daily_audits da
LEFT JOIN items i ON da.item_id = i.id
LEFT JOIN warehouses w ON da.warehouse_id = w.id
LEFT JOIN users u ON da.user_id = u.id;

-- ============================================
-- ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© 9: ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ŸÜÿ¨ÿßÿ≠ ÿßŸÑÿ•ÿπÿØÿßÿØ
-- ============================================

-- ÿπÿ±ÿ∂ ÿ±ÿ≥ÿßŸÑÿ© ŸÜÿ¨ÿßÿ≠
SELECT '‚úÖ ÿ™ŸÖ ÿ•ÿπÿØÿßÿØ ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ®ŸÜÿ¨ÿßÿ≠!' as status;

-- ÿπÿ±ÿ∂ ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿ≥ÿ±Ÿäÿπÿ©
SELECT 
  (SELECT COUNT(*) FROM warehouses) as "ÿπÿØÿØ ÿßŸÑŸÖÿÆÿßÿ≤ŸÜ",
  (SELECT COUNT(*) FROM categories) as "ÿπÿØÿØ ÿßŸÑŸÅÿ¶ÿßÿ™",
  (SELECT COUNT(*) FROM users) as "ÿπÿØÿØ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ",
  (SELECT COUNT(*) FROM items) as "ÿπÿØÿØ ÿßŸÑÿ£ÿµŸÜÿßŸÅ",
  (SELECT COUNT(*) FROM transactions) as "ÿπÿØÿØ ÿßŸÑŸÖÿπÿßŸÖŸÑÿßÿ™",
  (SELECT COUNT(*) FROM daily_audits) as "ÿπÿØÿØ ÿßŸÑŸÖÿ±ÿßÿ¨ÿπÿßÿ™ ÿßŸÑŸäŸàŸÖŸäÿ©",
  (SELECT COUNT(*) FROM inventory_audits) as "ÿπÿØÿØ ÿπŸÖŸÑŸäÿßÿ™ ÿßŸÑÿ¨ÿ±ÿØ",
  (SELECT COUNT(*) FROM audit_details) as "ÿπÿØÿØ ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿ¨ÿ±ÿØ";

-- ÿπÿ±ÿ∂ ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖÿÆÿßÿ≤ŸÜ
SELECT 
  id as "ÿ±ŸÇŸÖ ÿßŸÑŸÖÿÆÿ≤ŸÜ",
  name as "ÿßÿ≥ŸÖ ÿßŸÑŸÖÿÆÿ≤ŸÜ",
  description as "ÿßŸÑŸàÿµŸÅ"
FROM warehouses
ORDER BY id;

-- ÿπÿ±ÿ∂ ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ
SELECT 
  id as "ÿßŸÑÿ±ŸÇŸÖ",
  name as "ÿßŸÑÿßÿ≥ŸÖ",
  role as "ÿßŸÑÿØŸàÿ±",
  national_id as "ÿßŸÑÿ±ŸÇŸÖ ÿßŸÑŸÇŸàŸÖŸä",
  CASE 
    WHEN role = 'admin' THEN 'ŸÑÿß ŸäŸàÿ¨ÿØ'
    ELSE (SELECT name FROM warehouses WHERE id = users.warehouse_id)
  END as "ÿßŸÑŸÖÿÆÿ≤ŸÜ ÿßŸÑŸÖÿ≥ÿ§ŸàŸÑ ÿπŸÜŸá"
FROM users
ORDER BY id;

-- ============================================
-- ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ŸÖŸáŸÖÿ©:
-- ============================================
-- 
-- 1. üîê ÿ®ŸäÿßŸÜÿßÿ™ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ:
--    - ÿßŸÑŸÖÿ≥ÿ§ŸàŸÑ: ÿßŸÑÿ±ŸÇŸÖ ÿßŸÑŸÇŸàŸÖŸä = 12345678901234ÿå ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± = 901234
--    - ÿßŸÑŸÖŸàÿ∏ŸÅŸàŸÜ: ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± = ÿ¢ÿÆÿ± 6 ÿ£ÿ±ŸÇÿßŸÖ ŸÖŸÜ ÿßŸÑÿ±ŸÇŸÖ ÿßŸÑŸÇŸàŸÖŸä
--    - ÿ¨ŸÖŸäÿπ ŸÉŸÑŸÖÿßÿ™ ÿßŸÑŸÖÿ±Ÿàÿ± ŸÖÿ¥ŸÅÿ±ÿ© ÿ®ŸÄ SHA-256
--
-- 2. üì° Ÿäÿ¨ÿ® ÿ™ŸÅÿπŸäŸÑ Realtime ŸÖŸÜ Supabase Dashboard:
--    Database > Replication > Enable ŸÑŸÑÿ¨ÿØÿßŸàŸÑ:
--    - items
--    - transactions
--    - notifications
--    - users
--    - warehouses
--
-- 3. üîë ÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ•ÿ∂ÿßŸÅÿ© SUPABASE_URL Ÿà SUPABASE_ANON_KEY ŸÅŸä ŸÖŸÑŸÅ .env
--
-- 4. ‚ö†Ô∏è ÿßŸÑÿ≥Ÿäÿßÿ≥ÿßÿ™ ÿßŸÑÿ£ŸÖŸÜŸäÿ© (Row Level Security):
--    - ÿßŸÑÿ≥Ÿäÿßÿ≥ÿßÿ™ ÿßŸÑÿ≠ÿßŸÑŸäÿ© ŸÖŸÅÿ™Ÿàÿ≠ÿ© ŸÑŸÑÿ™ÿ∑ŸàŸäÿ± (USING true)
--    - ‚ö†Ô∏è Ÿäÿ¨ÿ® ÿ™ÿ¥ÿØŸäÿØŸáÿß ŸÑŸÑÿ•ŸÜÿ™ÿßÿ¨ ŸÑÿßÿ≠ŸÇÿßŸã
--    - ŸÑŸÑÿ•ŸÜÿ™ÿßÿ¨: ÿßÿ≥ÿ™ÿÆÿØŸÖ auth.uid() ŸÑŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ŸáŸàŸäÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
--    - ŸÖÿ´ÿßŸÑ: USING (auth.uid() = user_id OR role = 'admin')
--
-- 5. ‚úÖ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÉÿ™ŸÖÿßŸÑ ÿßŸÑŸÜÿ∏ÿßŸÖ:
--    ‚úÖ ÿπŸÖŸàÿØ password_hash ŸÖŸàÿ¨ŸàÿØ ŸÅŸä ÿ¨ÿØŸàŸÑ users
--    ‚úÖ ÿØŸàÿßŸÑ ÿßŸÑÿ™ÿ¥ŸÅŸäÿ± ŸàÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸàÿ¨ŸàÿØÿ© Ÿàÿ™ÿπŸÖŸÑ
--    ‚úÖ ÿØÿßŸÑÿ© log_quantity_change() ŸÖŸÉÿ™ŸÖŸÑÿ© Ÿàÿ™ŸèÿØÿÆŸÑ ÿ≥ÿ¨ŸÑÿßÿ™
--    ‚úÖ ŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖÿµÿßÿØŸÇÿ© ÿ¢ŸÖŸÜ (server-side)
--    ‚úÖ Triggers ÿ™ÿπŸÖŸÑ ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã
--
-- ============================================